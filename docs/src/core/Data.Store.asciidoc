=head1 NAME

MITHGrid.Data.initStore

=head1 SYNOPSIS

 store = MITHGrid.Data.initStore({ options list... });

 store.loadItems([ list of objects... ]);

 item = store.getItem(itemId);

 store.updateItems([ list of objects... ]);

 store.removeItems([ list of object ids... ]);

 store.events.onBeforeLoading.addListener(function() { ... });

=head1 DESCRIPTION

The data store object stores the actual triples that make up the application data. Other objects can watch the data source and
receive event notifications when data is modified, deleted, or added. Most interactions with the data source will happen through
the appropriate data views.

A plugin should register its expected item types and properties with the data source. This can be done through the data view,
which will pass along the type and property information to the data source object.

=head1 EVENTS

Events are listed as properties of the C<events> property. For example, the C<onModelChange> event is available as the
C<events.onModelChange> property of the data store object.

Generally, you don't need to register event handlers unless you are working with components outside the standard MITHGrid
framework. Data views, presentations, plugins, and applications automatically handle all of the needed event handler
registration to make everything work.

=over 4

=item onModelChange

This event is fired when the data store modifies its data in any way. The event handler will be passed the data store
object as well as a list of item identifiers for items that have been added, modified, or removed.

If you are writing an event handler for this event, then if an item id is passed that is not contained in the data store,
then that item was in the data store but has been removed. The following code gives a way to detect removed items:

 if(!store.contains(itemId)) {
   // do something about the removed item
 }
 else {
   // either the item was added or updated
 }

=item onBeforeLoading

This event is fired before the data store begins adding items. No information is passed to the event handler
about what items might be added.

=item onAfterLoading

This event is fired after the data store has added items. No information is passed to the event handler about
what items might have been added. If you need to know which items were added, use the onModelChange event or
pair with a handler for L<onBeforeLoading> that lets you compare the list of item identifiers from before the
loading with the list from after the loading.

=item onBeforeUpdating

This event is fired before the data store begins updating items. No information is passed to the event handler
about what items might be added.

=item onAfterUpdating

This event is fired after the data store has updated items. No information is passed to the event handler about
what items might have been added. If you need to know which items were added, use the onModelChange event.

=back

=head1 METHODS

=head2 Constructor

 store = MITHGrid.Data.initStore({ options list... })

The constructor initializes an empty data store. No options are used at present, but may be used in the future when providing
a server-based data source.

=head2 Schema

The data store has a minimal schema that lets it know how to handle properties in expressions.

=over 4

=item addProperty(name, { options... })

Adds the named property to the schema. The only option used at present is C<valueType>, which should be one of the following:

=over 4

=item date

Values are dates and/or times.

=item item

Values are pointers to other items.

=item number

Values are numeric.

=item text

Values are plain text with no special interpretation.

=back

=item getProperty(name)

Returns the property metadata object.

=item addType(name, { options... })

Adds the named item type to the schema. No options are used at present.

=item getType(name)

Returns the type metadata object.

=back

=head2 Data Access

=over 4

=item getItem(itemId)

Returns the properties associated with the C<itemId>. All properties map to arrays regardless of the number of values the
property might have.

=item getItems([ list of itemIds... ])

Returns a list of objects holding the properties associated with the list of item identifiers.

=item items( )

Returns the number of items in the data store.

=item contains(itemId)

Returns C<true> if the given C<itemId> is the identifier of an item in the data store.

=back

=head2 Data Management

=over 4

=item loadItems([ list of items... ])

Adds the provided list of objects to the data store.

=item updateItems([ list of items... ])

Updates the data store using the list of objects provided.

=item removeItems([ list of itemIds... ])

Removes the items from the data store indicated by the item identifiers.

=back

=head2 Graph Traversal

=over 4

=item prepare([ list of expressions... ])

=back

=head1 SEE ALSO